name: build-xcframeworks
on:
  push:
    branches:
      - master
      - bleeding
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches:
      - master
      - bleeding
    paths-ignore:
      - '**/README.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  wait-for-workflows:
    runs-on: [ubuntu-latest]
    if: github.repository == 'openframeworks/apothecary' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/bleeding')
    steps:
    - name: Wait build-ios
      uses: NathanFirmo/wait-for-other-action@v1.0.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        workflow: 'build-ios.yml'
    - name: Wait build-macos
      uses: NathanFirmo/wait-for-other-action@v1.0.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        workflow: 'build-macos.yml'
    # - name: Wait build-xros
    #   uses: NathanFirmo/wait-for-other-action@v1.0.4
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     workflow: 'build-xros.yml'
    - name: Wait build-catos
      uses: NathanFirmo/wait-for-other-action@v1.0.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        workflow: 'build-catos.yml'
    - name: Wait build-tvos
      uses: NathanFirmo/wait-for-other-action@v1.0.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        workflow: 'build-tvos.yml'
    - name: Wait build-watchos
      uses: NathanFirmo/wait-for-other-action@v1.0.4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        workflow: 'build-watchos.yml'
  build-xcframework:
    runs-on: macos-14
    if: github.repository == 'openframeworks/apothecary' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/bleeding')
    needs: wait-for-workflows
    env:
      DEVELOPER_DIR: "/Applications/Xcode_15.2.app/Contents/Developer"
      TARGET: "macos"
    steps:
      - name: Determine Release
        id: vars
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "release=nightly" >> $GITHUB_ENV
            echo "prerelease=false" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/bleeding" ]]; then
            echo "release=bleeding" >> $GITHUB_ENV
            echo "prerelease=true" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v4
      - name: Scripts Calc Formula
        run: ./scripts/calculate_formulas.sh
      - name: Scripts Install
        run: ./scripts/macos/install.sh
      - name: 'Download all artifacts'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Ensure the output directory exists
            const outputDir = path.join(process.env.GITHUB_WORKSPACE, 'out');
            if (!fs.existsSync(outputDir)){
              fs.mkdirSync(outputDir);
            }

            // List all artifacts for the repository
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 18
            });

            for (const artifact of artifacts.data.artifacts) {
              
              // Download each artifact
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip',
              });

              const artifactPath = path.join(outputDir, `${artifact.name}.zip`);
              fs.writeFileSync(artifactPath, Buffer.from(download.data));
              console.log(`Downloaded ${artifact.name} to ${artifactPath}`);
            }
      - name: Extract Artifacts to /out
        run: |
          mkdir -p out
          for zip in out/*.zip; do
              echo "Extracting $zip..."
              unzip -o "$zip" -d out/
          done
          echo "Extraction complete."
          rm out/*.zip
          for tarball in out/*.tar.bz2; do
              echo "Extracting $tarball..."
              tar -xjf "$tarball" -C out/
          done
          echo ".tar.bz2 extraction complete."
          rm -f out/*.tar.bz2 
      - name: List output directory
        run: ls -lah ./
      - name: List output directory out
        run: ls -lah ./out
      - name: Merge built libaries into Mega XC Framework
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: scripts/macos/xcframework_all.sh
        env:
          GA_CI_SECRET: ${{ secrets.CI_SECRET }}
      - name: Package Final
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: scripts/package.sh
        env:
          BUNDLE: ${{ matrix.bundle }}
          GA_CI_SECRET: ${{ secrets.CI_SECRET }}
      - name: Update Release arm64
        if: github.repository == 'openframeworks/apothecary' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/bleeding')
        uses: johnwbyrd/update-release@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.release }}
          release: ${{ env.release }}
          prerelease: ${{ env.prerelease }}
          files: out/openFrameworksLibs_${{ env.release }}_${{ env.TARGET }}.tar.bz2
