#! /bin/bash
#
# this is the OpenFrameworks library apothecary,
# it mixes formulas and potions to build and update the C/C++ lib dependencies
#
# formulas are simple scripts which implement the download, build, copy, & clean
# functions which are in turn called by this script,
# see docs/formula_template.sh for a bare formula script
#
# Core OF lib formulas are located in the formulas dir and addon formulas should
# be in addons/ofxMyAddon/scripts/formulas 
#
# 2013 Dan Wilcox <danomatika@gmail.com>
# Supported by the CMU Studio for Creative Inquiry: http://studioforcreativeinquiry.org
#
# references:
#  http://stackoverflow.com/questions/12219001/standalone-shell-script-vs-shell-function
#  http://www.tldp.org/LDP/abs/html/comparison-ops.html
#  http://tldp.org/LDP/abs/html/fto.html
#  http://www.developer.com/open/article.php/631241/Linux-Console-Colors--Other-Tricks.htm
#  http://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash
#  http://stackoverflow.com/questions/64786/error-handling-in-bash
#  http://www.linuxjournal.com/content/bash-arrays

################################################################################
### GLOBAL VARS, for access inside formulas

### SET IN FORMULA script

# an array of build type strings supported by the forumla (optional)
# see VALID_TYPES for list of strings, default: VALID_TYPES
FORMULA_TYPES=

### READ ONLY please!

# build settings
OS= # compile os ("osx", "windows", "linux")
TYPE= # library build type ("osx", "ios", "vs2010", etc)
ARCH=32 # library build arch, 32 or 64 bit (not used for some build types)

# full path to this script's dir
APOTHECARY_DIR=.

# full path to the dir of the current formula
FORMULA_DIR=

# full path to the download/build dir
BUILD_DIR=

# full path to the destination dir for compiled libs
LIBS_DIR=

### Xcode/ios specific settings

# xcode Developer root
XS="xcode-select -print-path" # stupid hack to keep my syntax highlighting from breaking :P
XCODE_DEV_ROOT=

# used when building some libs for osx
OSX_SDK_VER=10.8
OSX_MIN_SDK_VER=10.6

# used when building for ios, the sdks you have installed are found in:
# $XCODE_DEV_ROOT/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator#.#.sdk
IOS_SDK_VER=6.1
IOS_MIN_SDK_VER=5.1

################################################################################
### PRIVATE VARS, for internal use
### DEFINITELY READ ONLY!

# has the user set a custom libs dest dir?
IS_CUSTOM_LIBS_DIR=0

# paths relative to this script
REL_FORMULAS_DIR=formulas
REL_BUILD_DIR=build
REL_LIBS_DIR=../../libs
REL_ADDONS_DIR=../../addons

# ansi console escape codes
CON_DEFAULT="\033[0m"
CON_BOLD="\033[1m"
CON_RED="\033[31m"
CON_YELLOW="\033[93m"
CON_GREEN="\033[32m"

# used to filter out bad build types
VALID_TYPES=( "osx" "osx-clang-libc++" "linux" "linux64" "vs2010" "win_cb" "ios" "android" )

# verbose mode bool
A_VERBOSE=0

# nice, detailed help message
HELP="Usage: apothecary [options] command core/addons/libName/addonName

 this is the OpenFrameworks library apothecary
 it mixes formulas and potions to build and update OF C/C++ lib dependencies

 Commands:
  update		download, build, and copy library files
  
  download 		download the library source
  build 		build the library
  copy 			copy library files into the libs dir
  clean 		clean the library build

  remove		remove the library from the build cache
  remove-lib		remove the library from the libs dir
  remove-all		remove the library from the build cache and libs dir

 Options:
  -t	specify libary type when building, detects type from OS by default
	valid types: osx, linux, linux64, vs2010, win_cb, ios, android

  -a	specify architecture, either 32 or 64 (default is 32 bit)
	note: not currently needed, reserved for future use

  -b 	set the lib build dir, default: \$APOTHECARY_DIR/build

  -d 	set the compiled libs destination dir,
  	default: OF core libs dir or addons/addonName/libs for addons

  -v 	verbose mode, print out some extra info while mixing formulas

  -h    print this usage guide

 Examples:

  # update all core libs and addon libs
  apothecary update core addons

  # update only glew
  apothecary update glew
 
  # remove all downloaded core lib src dirs from the build cache
  apothecary remove core

  # remove only assimp & glew from the cache
  apothecary remove assimp glew

  # remove glew from the build cache and libs dir
  apothecary remove-all glew

  # update freetype for ios 
  apothecary -t ios freetype

  # update assimp for 64bit OSX (maybe in the future ...)
  apothecary -t osx -a 64 assimp

  # update assimp in the ofxAssimpModelLoader addonFormula
  apothecary update ofxAssimpModelLoader

  # update a formula script manually and set build and lib dest dirs
  apothecary -b ../build -d ../libs path/to/formula.sh 
"

################################################################################
#### SET ERROR HANDLING

#set -x # run script in debug mode

set -o pipefail  # trace ERR through pipes
set -o errtrace  # trace ERR through 'time command' and other functions
set -o nounset   # set -u : exit the script if you try to use an uninitialized variable
set -o errexit   # set -e : exit the script if any statement returns a non-true return value

# trap the killer signals so that we can exit with a good message
trap "trapSignal SIGHUP" SIGHUP
trap "trapSignal SIGINT" SIGINT
trap "trapSignal SIGTERM" SIGTERM

trapSignal() {
	echo
	echoError " Received signal $1"
	exit 1
}

# trap any script errors and exit
trap "trapError" ERR

trapError() {
	echo
	echoError " ^ Received error ^"
	exit 1
}

# console printing functions (with color)
echoError()		{
	echo -e "$CON_BOLD$CON_RED$1$CON_DEFAULT"
}
echoWarning()	{
	echo -e "$CON_BOLD$CON_YELLOW$1$CON_DEFAULT"
}
echoInfo()		{
	echo -e "$CON_BOLD$1$CON_DEFAULT"
}
echoSuccess()	{
	echo -e "$CON_BOLD$CON_GREEN$1$CON_DEFAULT"
}
echoVerbose() {
	if [ $A_VERBOSE == 1 ] ; then
		echoInfo "$1"
	fi
}

################################################################################
#### PARSE COMMANDLINE

# from http://www.mkssoftware.com/docs/man1/getopts.1.asp
while getopts t:a:b:d:hv opt ; do
	case "$opt" in
		t) # set the library build type
		   TYPE="$OPTARG" ;;
		a) # set the architecture
		   ARCH=$OPTARG ;;
		b) # set the build dir
		   BUILD_DIR="$OPTARG" ;;
		d) # set lib destination dir
		   LIBS_DIR="$OPTARG" ;;
		h) # print help and exit
		   echo "$HELP" ; exit 0 ;;
		v) # verbose mode = true
		   A_VERBOSE=1 ;;
		[?]) # print help and exit 
			 echo "$HELP" ; exit 0 ;;
	esac
done
shift $(expr $OPTIND - 1)

# get command
if [ $# -gt 0 ] ; then
	A_CMD=$1
else
	echoWarning " Missing command, see help: apothecary -h"
	exit 1
fi
shift 1

# check for arguments
if [ $# -lt 1 ] ; then
	echoWarning " Missing lib build target (maybe you wanted \"core\"), see help: apothecary -h"
	exit 1
fi

################################################################################
### FUNCTIONS

# check if a given string matches anything in VALID_TYPES,
# bool result is set to second argument
function isValidType() {
	local i
	for i in "${VALID_TYPES[@]}" ; do
		if [ "$i" == "$1" ] ; then
			eval $2=1
			return
		fi
	done
	eval $2=0
}

# check if a given string matches anything in FORMULA_TYPES,
# bool result is set to second argument 
function isFormulaType() {
	local i
	for i in "${FORMULA_TYPES[@]}" ; do
		if [ "$i" == "$1" ] ; then
			eval $2=1
			return
		fi
	done
	eval $2=0
}

# checks if a given formula string is a forumla script or exists in the formulas dir,
# exits with error on failure, sets formula script and parent dir on success
#
# sets isAddon arg if given string is an addon in the addons dir, script & parent dir
# will be empty if the addon does not contain any formulas
#
# args: formula string, formula script, formula script parent dir, isAddon bool
function checkFormula() {
	local script
	local parentDir

	# is given formula an existing script?
	if [ -e $1 -a "${1##*.}" == "sh" ] ; then
		local path=$1	
		case $1 in
			/*) : ;; # absolute path
			 *) path=$WD/$1 ;; # relative path
		esac
		script=$(basename $path)
		parentDir=$(dirname $path)
	
	# existing formula dir with script?
	elif [ -e $1 -a -d $1 -a -e $1/$1.sh ] ; then
		local path=$1/$1.sh	
		case $1 in
			/*) : ;; # absolute path
			 *) path=$WD/$1/$1.sh ;; # relative path
		esac
		script=$(basename $path)
		parentDir=$(dirname $path)
			
	# is the given formula name a script in the formulas dir?
	elif [ -e $REL_FORMULAS_DIR/$1.sh ] ; then
		script=$1.sh
		parentDir=$APOTHECARY_DIR/$REL_FORMULAS_DIR 
	
	# is the given formula dir in the formuals a dir?
	elif [ -e $REL_FORMULAS_DIR/$1 -a -d $REL_FORMULAS_DIR/$1 ] ; then
		script=$1.sh
		parentDir=$APOTHECARY_DIR/$REL_FORMULAS_DIR/$1

	# is the given formula name an addon in the addons dir?
	elif [ -e $REL_ADDONS_DIR/$1 ] ; then 
		
		echoVerbose " Detected addon: \"$1\""

		# are there formulas in the addon formulas dir?
		if [ -e $REL_ADDONS_DIR/$1/scripts/formulas ] ; then
			script=
			parentDir=$REL_ADDONS_DIR/$1/scripts/formulas
		else
			script=
			parentDir=""
		fi
		eval $4=1

	else
		echoError " No formula for lib \"$1\""
		exit 1
	fi

	#echoVerbose " checkFormula script: $script"
	#echoVerbose " checkFormula script parent dir: $parentDir"
	eval $2=$script
	eval $3=$parentDir
}

# execute a given command on a formula and/or formulas,
# checks and sources formula scripts before running based on first arg:
# $1 = bool, should source this formula
# $2 = command
# $3 = "core", "addons", list of library/addon names, script file to run, etc
function doCommand() {

	local shouldSource=$1
	local cmd=$2
	shift 2

	# process given lib targets
	while [ $# -gt 0 ] ; do

		# process all formulas in formulas dir
		if [ "$1" == "core" ] ; then
			local formula
			for formula in $( ls -1 $REL_FORMULAS_DIR) ; do
				doCommand $shouldSource $cmd "${formula%.*}" # remove extension
			done

		# process all addons in the addons dir
		elif [ "$1" == "addons" ] ; then
			local addon
			for addon in $(ls -1 $REL_ADDONS_DIR) ; do
				if [ -d $REL_ADDONS_DIR/$addon ] ; then
					doCommand $shouldSource $cmd $addon
				fi
			done

		else # process given lib or addon

			local formula
			local isAddon=0
			checkFormula $1 formula FORMULA_DIR isAddon

			if [ $isAddon == 1 ] ; then
				local tmpLibsDir=$LIBS_DIR

				# are there formulas in the addon formulas dir?
				if [ "$FORMULA_DIR" != "" ] ; then					

					# set libs dest dir to addon/libs if it hasn't been manually set
					if [ $IS_CUSTOM_LIBS_DIR == 0 ] ; then
						LIBS_DIR=$APOTHECARY_DIR/$REL_ADDONS_DIR/$1/libs
					fi

					# process all formulas in scripts/formulas
					local addonFormula
					for addonFormula in $( ls -1 $FORMULA_DIR) ; do
						doCommand $shouldSource $cmd $FORMULA_DIR/$addonFormula
					done
					
					# back to default
					if [ $IS_CUSTOM_LIBS_DIR == 0 ] ; then
						LIBS_DIR=$tmpLibsDir
					fi
				else
					echoInfo " Skipping addon \"$1\": no formulas found"					
				fi
			
			else # not an addon

				# load a script & it's function implementations
				if [ $shouldSource == 1 ] ; then
					source $FORMULA_DIR/$formula
				fi
				formula=$(basename $1)
				local currentLib="${formula%.*}"

				if [ $shouldSource == 1 ] ; then
					# does this formula support the current build type?
					local bFormulaType=0 # bool
					isFormulaType $TYPE bFormulaType
					if [ $bFormulaType == 0 ] ; then
						echoInfo " Skipping \"$currentLib\": $cmd not needed for type \"$TYPE\""
					else
						# do command
						$cmd $currentLib
					fi
				else
					# do command
					$cmd $currentLib
				fi
			fi
		fi

		shift 1

		# reset to all types
		FORMULA_TYPES=("${VALID_TYPES[@]}") # copy array

	done
}

# update a given library
function updateFormula() {

	echo
	echoInfo " ----- $1 -----"

	# if [ -e $BUILD_DIR/$1 ] ; then
	# 	cleanFormula $1
	# fi
	downloadFormula $1
	buildFormula $1
	copyFormula $1

	echo
	echoSuccess " Finished \"$1\""
}

# download a given library into the build cache, arg is library name
function downloadFormula(){
	
	echo
	echoInfo " Downloading \"$1\""
	echoVerbose " Formula dir: $FORMULA_DIR"
	echoVerbose " Formula build types: ${FORMULA_TYPES[*]}"
	echoVerbose " Build dir: $BUILD_DIR"
	echo

	mkdir -p $BUILD_DIR
	cd $BUILD_DIR

	if [ -e $1 ] ; then
		echo "... skipping, src dir already exists"
	else
		download
		if [ ! -e $1 ] ; then
			echoError " It looks like downloading failed for \"$1\""
			exit 1
		fi
	fi
	cd $APOTHECARY_DIR
}

# build a given library, arg is library name
function buildFormula() {

	# run build command in src dir
	echo
	echoInfo " Building \"$1\""
	echoVerbose " Lib src dir: $BUILD_DIR/$1"
	echo

	if [ ! -e $BUILD_DIR/$1 ] ; then
		echoError " Lib src dir missing for \"$1\": $BUILD_DIR/$1"
		echoError " Did you download the formula?"
		exit 1
	fi

	cd $BUILD_DIR/$1
	build
	cd $APOTHECARY_DIR
}

# copy a given library, arg is library name
function copyFormula() {

	# dest arg path relative to src dir
	echo
	echoInfo " Copying \"$1\""
	echoVerbose " Lib src dir: $BUILD_DIR/$1"
	echoVerbose " Lib dest dir: $LIBS_DIR/$1"
	echo

	if [ ! -e $BUILD_DIR/$1 ] ; then
		echoError " Lib src dir missing for \"$1\": $BUILD_DIR/$1"
		echoError " Did you download the formula?"
		exit 1
	fi

	mkdir -p $LIBS_DIR/$1

	cd $BUILD_DIR/$1
	copy $LIBS_DIR/$1
	cd $APOTHECARY_DIR
}

# clean a given library, arg is library name
function cleanFormula() {
	
	# run build command in src dir
	echo
	echoInfo " Cleaning \"$1\""
	echoVerbose " Lib src dir: $BUILD_DIR/$1"
	echo

	if [ ! -e $BUILD_DIR/$1 ] ; then
		echoError " Lib src dir missing for \"$1\": $BUILD_DIR/$1"
		echoError " Did you download the formula?"
		exit 1
	fi

	cd $BUILD_DIR/$1
	clean
	cd $APOTHECARY_DIR
}

# remove a given library from the cache
function remove() {

	echoVerbose " Lib src dir: $BUILD_DIR/$1"
	cd $BUILD_DIR
	if [ ! -e $1* ] ; then
		echoVerbose " Nothing to remove from build cache: \"$1\""
	else
		rm -rf $1*
		echoSuccess " Removed from build cache: \"$1\""
	fi
	cd $APOTHECARY_DIR
}

# remove a given library from the lib dir
function remove-lib() {

	echoVerbose " Libs dest dir: $LIBS_DIR"
	cd $LIBS_DIR
	if [ ! -e $1 ] ; then
		echoVerbose " Nothing to remove from lib dest dir: \"$1\""
	else
		rm -rf $1
		echoSuccess " Removed from lib dest dir: \"$1\""
	fi
	cd $APOTHECARY_DIR
}

# remove a given library from the cache and lib dir
function remove-all() {
	remove $1
	remove-lib $1
}

################################################################################
### FORMULA SCRIPT FUNCTIONS

# basic implementations of the formula script functions,
# overrriden when sourcing a formula script

function download() {
	echoWarning " Download function not implemented"
}
function build() {
	echoWarning " Build function not implemented"
}
function copy() {
	echoWarning " Copy function not implemented"
}
function clean() {
	echoWarning " Clean function not implemented"
} 

################################################################################
### GO

# record current working dir
WD=$(pwd)

# change to the dir of this script
cd $(dirname $0)
APOTHECARY_DIR=$(pwd)

# set OS & build types
OS=`./ostype.sh`
if [ "$TYPE" == "" ] ; then
	case "$OS" in
		windows)
			TYPE="vs2010" ;;
		*)
			TYPE=$OS ;;
	esac
fi
FORMULA_TYPES=("${VALID_TYPES[@]}") # copy array
echoVerbose "Valid build types: ${VALID_TYPES[*]}"

# set xcode dev root on osx
if [ "$OS" == "osx" ] ; then
	XCODE_DEV_ROOT=$($XS)
fi

# check if we have a valid build type
typeIsValid=0 # bool
isValidType $TYPE typeIsValid
if [ $typeIsValid == 0 ] ; then
	echoError " Invalid build type: \"$TYPE\""
	exit 1
fi
echoVerbose "Build type: $TYPE"

# check if we have a valid arch
if [ $ARCH != 32 -a $ARCH != 64 ] ; then
	echoError " Invalid architecture: $ARCH"
	exit 1
fi
echoVerbose "Architecture: $ARCH"

# use default build dir?
if [ "$BUILD_DIR" == "" ] ; then
	BUILD_DIR=$APOTHECARY_DIR/$REL_BUILD_DIR
else # manually set
	case $BUILD_DIR in
		/*) : ;; # absolute path
	 	*) BUILD_DIR=$WD/$BUILD_DIR ;; # relative path
	esac
fi
echoVerbose "Build dir: $BUILD_DIR"

# use default libs dir?
if [ "$LIBS_DIR" == "" ] ; then
	LIBS_DIR=$APOTHECARY_DIR/$REL_LIBS_DIR
else # manually set
	case $LIBS_DIR in
		/*) : ;; # absolute path
	 	*) LIBS_DIR=$WD/$LIBS_DIR ;; # relative path
	esac
	IS_CUSTOM_LIBS_DIR=1
fi
echoVerbose "Libs dest dir: $LIBS_DIR"

# handle commands
echoVerbose "Running: $A_CMD $*"
case "$A_CMD" in

	update)
		doCommand 1 updateFormula $@ ;;

	download)
		doCommand 1 downloadFormula $@ ;;

	build)
		doCommand 1 buildFormula $@ ;;

	copy)
		doCommand 1 copyFormula $@ ;;

	clean)
		doCommand 1 cleanFormula $@ ;;

	remove)
		if [ ! -e $BUILD_DIR ] ; then
			echoInfo " Nothing to remove"
			exit 0
		fi
		doCommand 0 remove $@ ;;

	remove-lib)
		if [ ! -e $LIBS_DIR ] ; then
			echoInfo " Nothing to remove"
			exit 0
		fi
		doCommand 0 remove-lib $@ ;;

	remove-all)
		doCommand 0 remove-all $@ ;;

	*)
		echoError " Unknown command \"$A_CMD\""
		exit 1 ;;
esac

exit 0
